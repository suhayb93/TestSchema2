CREATE OR REPLACE NONEDITIONABLE TYPE mdsys.ST_ANNOTATION_TEXT
                                                                              
    AS OBJECT (
       PrivateEnvelope     SDO_GEOMETRY,
       PrivateElement_Array    ST_ANNOTATIONTEXTELEMENT_ARRAY,
       CONSTRUCTOR FUNCTION ST_ANNOTATION_TEXT(anTextArray ST_ANNOTATIONTEXTELEMENT_ARRAY ) RETURN SELF AS RESULT,
       MEMBER FUNCTION CONCAT (anText ST_ANNOTATION_TEXT)
             RETURN ST_ANNOTATION_TEXT,
      MEMBER FUNCTION Envelope RETURN SDO_GEOMETRY,
      MEMBER FUNCTION Element_Array RETURN ST_ANNOTATIONTEXTELEMENT_ARRAY)  
/
CREATE OR REPLACE TYPE BODY mdsys.ST_ANNOTATION_TEXT IS
 CONSTRUCTOR FUNCTION ST_ANNOTATION_TEXT(anTextArray
               ST_ANNOTATIONTEXTELEMENT_ARRAY ) RETURN SELF AS RESULT IS
  mbr SDO_GEOMETRY;
  geom SDO_GEOMETRY;
  idx number;
  anText ST_ANNOTATIONTEXTELEMENT;
 BEGIN
   geom := null;
   FOR idx in 1 .. anTextArray.PRIVATEARRAY.count LOOP
     anText := anTextArray.ElementN(idx);
     IF (anText.PRIVATELEADERLINE is NULL) THEN
       mbr := sdo_3gl.sdo_mbr(anText.PRIVATELOCATION,anText.PRIVATELOCATION);
     ELSE
       mbr := sdo_3gl.sdo_mbr(anText.PRIVATELOCATION, anText.PRIVATELEADERLINE);
     END IF;
     geom := sdo_util.append(geom, mbr);
   END LOOP;
   -- PRIVATEENVELOPE := sdo_geom.sdo_mbr(geom);
   -- EXECUTE IMMEDIATE 'select sdo_geom_mbr(:1) from dual'
     -- into PRIVATEENVELOPE using geom;
   select sdo_geom_mbr(geom) into PRIVATEENVELOPE from dual;
   PRIVATEELEMENT_ARRAY := anTextArray;
   RETURN;
 END;

 MEMBER FUNCTION CONCAT (anText ST_ANNOTATION_TEXT)
             RETURN ST_ANNOTATION_TEXT IS
  prvArray ST_ANNOT_TEXTELEMENT_ARRAY;
 BEGIN
    prvArray := ST_ANNOT_TEXTELEMENT_ARRAY();
    prvArray.extend(anText.PRIVATEELEMENT_ARRAY.PRIVATEARRAY.count+
                      SELF.PRIVATEELEMENT_ARRAY.PRIVATEARRAY.count);
    FOR idx in 1 .. SELF.PRIVATEELEMENT_ARRAY.PRIVATEARRAY.count LOOP
     prvArray(idx) := SELF.PRIVATEELEMENT_ARRAY.PRIVATEARRAY(idx);
    END LOOP;
    FOR idx in 1 .. anText.PRIVATEELEMENT_ARRAY.PRIVATEARRAY.count LOOP
     prvArray(idx+anText.PRIVATEELEMENT_ARRAY.PRIVATEARRAY.count) :=
                  anText.PRIVATEELEMENT_ARRAY.PRIVATEARRAY(idx);
    END LOOP;
   RETURN ST_ANNOTATION_TEXT(ST_ANNOTATIONTEXTELEMENT_ARRAY(prvArray));
 END;
 MEMBER FUNCTION Envelope RETURN SDO_GEOMETRY IS
 BEGIN
   RETURN PRIVATEENVELOPE;
 END;
 MEMBER FUNCTION Element_Array RETURN ST_ANNOTATIONTEXTELEMENT_ARRAY  IS
 BEGIN
   RETURN PRIVATEELEMENT_ARRAY;
 END;
END;
/